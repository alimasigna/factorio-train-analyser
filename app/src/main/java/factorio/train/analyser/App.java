/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package factorio.train.analyser;

import java.util.ArrayList;

import factorio.train.analyser.analyser.Deadlock_Analyser;
import factorio.train.analyser.analyser.Result;
import factorio.train.analyser.decoder.Decoder;
import factorio.train.analyser.graph.Graph;

public class App {

    private static final String blueprint = "0eNqdmNtq4zAURf9Fz26x7pJ/ZShD2oqOIHGC7Q4Tgv+9Th1KLyfD3nlMsFa2zvGJln1Sj9vXchhqP6nupOrTvh9V9+ukxvrSb7bn76bjoahO1ansVKP6ze78adjUrZobVfvn8k91en5oVOmnOtWyrn//cPzdv+4ey7Bc8LFynJa1L3+mu3dEow77cVm1788/tZCcto06qi76eW5+YMyXAHeXkALE3fsL5t4vMZ/rUJ7WC5yAtSg2f8YKIAdv0+j/bNPT1YoSJtBpREyEMW1cMflryY0ATTg0w9CM103DUN3S3UCo+gaqxDE4x+PpLE7Fe67x8dB407Wnb3OEGm6gShx8egxx9+DjY4iu4/Nj8K4bfH4M3nWDz4/Fu27QA6ZNl5Mgtd8PmCBxLTvtSYvnn0NPqsjlo2foSr4A5jNkvkjXz4r5EisQySICYTJdPzGfpc+aJAqE1azRJCcbjTX0zmQO6ljtR6L4vfLSxFpHV0yUHOvRigUuH32OXMkX0cnyXL7E2l0C/kdtZvUOobqW9TuISpsYRDU3UCWOZf0OSudYv4OonvU7iMpPEEKNN1AlTmL9DkqXWb9DqL5l/Q6iatbvIKph/Q6i0h6WRc/x9IP+FQ79pJ9Fb/CB9ZpsEK/xkfWIbGWP8ImumLzTTFdMzBNaOs/CeWjW92Ddp9dmjfpbhnG95ZJ2MZuYXLYhh3l+A8ZvUBw=";

    public String decode() {
        Matrix matrix = new Matrix(blueprint);
        Graph graph = new Graph(blueprint);
        graph.getClass();
        Decoder decoder = new Decoder();
        String decodedString = decoder.decode(blueprint);
        Deadlock_Analyser analyser = new Deadlock_Analyser(graph);
        ArrayList<Result> result = analyser.deadlockCheck();
        return (decodedString + "\n" + matrix);
        //Matrix matrix_copy = matrix;
        //return deadlockmatrix(matrix_copy, result);
    }
/*
    private String deadlockmatrix(Matrix matrix_blueprint, ArrayList<ArrayList<Section>> deadlocks) {
        String result = "";
        for (ArrayList<Section> deadlock : deadlocks) {
            if (deadlock.size() > 1) {
                ArrayList<Position> positions = new ArrayList<Position>();
                for (Section section : deadlock) {
                    for (Node node : section.getNodes()) {
                        for (Track track : node.getTracks()) {
                            positions.add(track.getPosition());
                        }
                    }

                }
                ArrayList<Entity>[][] matrix_entities = matrix_blueprint.getMatrix();
                for (ArrayList<Entity>[] arrayLists : matrix_entities) {
                    for (ArrayList<Entity> arrayList : arrayLists) {
                        if (arrayList != null) {
                            for (int i = 0; i < arrayList.size(); i++) {
                                for (int j = 0; j < positions.size(); j++) {
                                    if (arrayList.get(i).getPosition().getX() == positions.get(j).getX()
                                            && arrayList.get(i).getPosition().getY() == positions.get(j).getY()) {
                                        continue;
                                    } else if (j == positions.size() - 1
                                            && !(arrayList.get(i).getPosition().getX() == positions.get(j).getX())) {
                                        arrayList.remove(i);
                                    }
                                }
                            }
                        }
                    }
                }
                Matrix deadlockMatrix = new Matrix();
                deadlockMatrix.overrideMatrix(matrix_entities);
                System.out.println("\n" + "------" + "\n" + deadlockMatrix.toString());
            } else {
                System.out.println("\n" + "------" + "\n" + "no deadlock");
            }
        }
        return result;
    }
*/
    public static void main(String[] args) {
        System.out.println(new App().decode());
    }
}
